---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Scheduled Release

concurrency:
  group: pack-release
  cancel-in-progress: false

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  UPSTREAM_REPO: Fabulously-Optimized/fabulously-optimized
  # renovate: datasource=github-releases depName=Fabulously-Optimized/fabulously-optimized
  VERSION: v10.2.0-beta.5

jobs:
  sync-release:
    name: Sync and Create Matching Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5

      - name: Install Packwiz
        run: go install github.com/packwiz/packwiz@latest

      - name: Download and Process Release
        id: process-release
        run: |
          # Remove the 'v' prefix from VERSION
          VERSION_STRIPPED="${VERSION#v}"

          # Download the pack zip file
          wget -O FO.zip "https://github.com/$UPSTREAM_REPO/releases/download/$VERSION/Fabulously.Optimized-$VERSION_STRIPPED.zip"

          # Remove old files
          rm -r mods/ || true
          rm -r config/ || true
          rm index.toml || true
          rm pack.toml || true

          # Import the new pack
          packwiz cf import FO.zip

          # Cleanup
          rm FO.zip
          rm -r resourcepacks/ || true

          # Remove mods based on exclusion list
          curl --silent "https://raw.githubusercontent.com/itzg/docker-minecraft-server/master/files/cf-exclude-include.json" |
          jq -r '.globalExcludes[]' | cat - <(echo "e4mc") | while read -r mod; do
            echo "Removing $mod if exists..."
            packwiz remove "$mod" 1>/dev/null || true
          done

          # Refresh packwiz metadata
          packwiz refresh

      - name: Check for Changes, Commit, and Tag
        run: |
          git add -A
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "codewarden-bot"
            git config user.email "168740723+codewarden-bot[bot]@users.noreply.github.com"
            git commit -m "Synced with upstream release $VERSION"
            git tag -f "$VERSION" -m "Release $VERSION"
            git push --force origin main --tags
          else
            echo "No changes detected, skipping commit and tag."
          fi

      - name: Generate Token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Get Release Info from Upstream
        id: get-release
        run: |
          # Use GitHub API to get the release description
          RELEASE_URL="https://api.github.com/repos/$UPSTREAM_REPO/releases/tags/$VERSION"
          RELEASE_DATA=$(curl -s "$RELEASE_URL")
          RELEASE_DESCRIPTION=$(echo "$RELEASE_DATA" | jq -r '.body')
          RELEASE_NAME=$(echo "$RELEASE_DATA" | jq -r '.name')

          echo "release_description<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_DESCRIPTION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "release_name=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1
        with:
          allowUpdates: true
          body: ${{ env.release_description }}
          name: ${{ env.release_name }}
          tag: "${{ env.VERSION }}"
          token: "${{ steps.app-token.outputs.token }}"
